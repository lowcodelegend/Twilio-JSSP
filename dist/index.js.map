{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\n/**\r\n * Twilio SMS Broker - Sends, retrieves, lists, and deletes SMS messages.\r\n */\r\n\r\nmetadata = {\r\n  systemName: \"com.yourcompany.twilio.sms\",\r\n  displayName: \"Twilio SMS Broker\",\r\n  description: \"Integrates with Twilio to send, fetch, list, and delete SMS messages.\",\r\n  configuration: {\r\n    accountSid: {\r\n      displayName: \"Twilio Account SID\",\r\n      type: \"string\",\r\n      required: true\r\n    },\r\n    authToken: {\r\n      displayName: \"Twilio Auth Token\",\r\n      required: true,\r\n      type: \"string\"\r\n    }\r\n  }\r\n};\r\n\r\n\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n  postSchema({\r\n    objects: {\r\n      message: {\r\n        displayName: \"Message\",\r\n        description: \"Represents an SMS message in Twilio.\",\r\n        properties: {\r\n          sid: { displayName: \"Message SID\", type: \"string\" },\r\n          to: { displayName: \"To\", type: \"string\" },\r\n          from: { displayName: \"From\", type: \"string\" },\r\n          body: { displayName: \"Body\", type: \"string\" },\r\n          status: { displayName: \"Status\", type: \"string\" },\r\n          dateSent: { displayName: \"Date Sent\", type: \"string\" },\r\n          errorCode: { displayName: \"Error Code\", type: \"string\" },\r\n        },\r\n        methods: {\r\n          send: {\r\n            displayName: \"Send Message\",\r\n            type: \"create\",\r\n            inputs: [\"to\", \"from\", \"body\"],\r\n            outputs: [\"sid\", \"status\", \"dateSent\", \"errorCode\"],\r\n          },\r\n          get: {\r\n            displayName: \"Get Message\",\r\n            type: \"read\",\r\n            inputs: [\"sid\"],\r\n            outputs: [\r\n              \"sid\",\r\n              \"to\",\r\n              \"from\",\r\n              \"body\",\r\n              \"status\",\r\n              \"dateSent\",\r\n              \"errorCode\",\r\n            ],\r\n          },\r\n          list: {\r\n            displayName: \"List Messages\",\r\n            type: \"list\",\r\n            parameters: {\r\n              to: { displayName: \"To\", type: \"string\" },\r\n              from: { displayName: \"From\", type: \"string\" },\r\n              dateSent: { displayName: \"Date Sent\", type: \"string\" },\r\n            },\r\n            outputs: [\r\n              \"sid\",\r\n              \"to\",\r\n              \"from\",\r\n              \"body\",\r\n              \"status\",\r\n              \"dateSent\",\r\n              \"errorCode\",\r\n            ],\r\n          },\r\n          delete: {\r\n            displayName: \"Delete Message\",\r\n            type: \"delete\",\r\n            inputs: [\"sid\"],\r\n            outputs: [],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nonexecute = async function ({\r\n  objectName,\r\n  methodName,\r\n  parameters,\r\n  properties,\r\n  configuration,\r\n  schema,\r\n}): Promise<void> {\r\n  switch (objectName) {\r\n    case \"message\":\r\n      await onexecuteMessage(methodName, properties, parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The object '\" + objectName + \"' is not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteMessage(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n): Promise<void> {\r\n  switch (methodName) {\r\n    case \"send\":\r\n      await onexecuteMessageSend(properties, configuration);\r\n      break;\r\n    case \"get\":\r\n      await onexecuteMessageGet(properties, configuration);\r\n      break;\r\n    case \"list\":\r\n      await onexecuteMessageList(parameters, configuration);\r\n      break;\r\n    case \"delete\":\r\n      await onexecuteMessageDelete(properties, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The method '\" + methodName + \"' is not supported.\");\r\n  }\r\n}\r\n\r\nfunction getTwilioApiBaseUrl(accountSid: string) {\r\n  return \"https://api.twilio.com/2010-04-01/Accounts/\" + encodeURIComponent(accountSid);\r\n}\r\n\r\n// Helper: Creates an XHR with Twilio Auth\r\nfunction createTwilioXHR(method: string, url: string, configuration: SingleRecord): XMLHttpRequest {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(method, url);\r\n  // Basic Auth (Base64 encoding)\r\n  const username = configuration[\"accountSid\"];\r\n  const password = configuration[\"authToken\"];\r\n  const credentials = base64Encode(username + \":\" + password);\r\n  xhr.setRequestHeader(\"Authorization\", \"Basic \" + credentials);\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n  return xhr;\r\n}\r\n\r\n// --- SEND MESSAGE ---\r\nasync function onexecuteMessageSend(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    const url = getTwilioApiBaseUrl(configuration[\"accountSid\"].toString()) + \"/Messages.json\";\r\n    const xhr = createTwilioXHR(\"POST\", url, configuration);\r\n\r\n    const params = [\r\n      \"To=\" + encodeURIComponent(properties[\"to\"].toString()),\r\n      \"From=\" + encodeURIComponent(properties[\"from\"].toString()),\r\n      \"Body=\" + encodeURIComponent(properties[\"body\"].toString())\r\n    ].join(\"&\");\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState !== 4) return;\r\n      try {\r\n        if (xhr.status < 200 || xhr.status >= 300)\r\n          throw new Error(\"Twilio send failed: \" + xhr.status + \" - \" + xhr.responseText);\r\n\r\n        const obj = JSON.parse(xhr.responseText);\r\n        postResult({\r\n          sid: obj.sid,\r\n          status: obj.status,\r\n          dateSent: obj.date_sent || \"\",\r\n          errorCode: obj.error_code ? String(obj.error_code) : \"\"\r\n        });\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    xhr.send(params);\r\n  });\r\n}\r\n\r\n// --- GET MESSAGE ---\r\nasync function onexecuteMessageGet(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    if (!properties[\"sid\"]) throw new Error(\"sid is required.\");\r\n    const url = getTwilioApiBaseUrl(configuration[\"accountSid\"].toString()) + \"/Messages/\" + encodeURIComponent(properties[\"sid\"].toString()) + \".json\";\r\n    const xhr = createTwilioXHR(\"GET\", url, configuration);\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState !== 4) return;\r\n      try {\r\n        if (xhr.status < 200 || xhr.status >= 300)\r\n          throw new Error(\"Twilio get failed: \" + xhr.status + \" - \" + xhr.responseText);\r\n\r\n        const obj = JSON.parse(xhr.responseText);\r\n        postResult({\r\n          sid: obj.sid,\r\n          to: obj.to,\r\n          from: obj.from,\r\n          body: obj.body,\r\n          status: obj.status,\r\n          dateSent: obj.date_sent || \"\",\r\n          errorCode: obj.error_code ? String(obj.error_code) : \"\"\r\n        });\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    xhr.send();\r\n  });\r\n}\r\n\r\n// --- LIST MESSAGES ---\r\nasync function onexecuteMessageList(parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let url = getTwilioApiBaseUrl(configuration[\"accountSid\"].toString()) + \"/Messages.json\";\r\n    const params = [];\r\n    if (parameters[\"to\"]) params.push(\"To=\" + encodeURIComponent(parameters[\"to\"].toString()));\r\n    if (parameters[\"from\"]) params.push(\"From=\" + encodeURIComponent(parameters[\"from\"].toString()));\r\n    if (parameters[\"dateSent\"]) params.push(\"DateSent=\" + encodeURIComponent(parameters[\"dateSent\"].toString()));\r\n    if (params.length > 0) url += \"?\" + params.join(\"&\");\r\n\r\n    const xhr = createTwilioXHR(\"GET\", url, configuration);\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState !== 4) return;\r\n      try {\r\n        if (xhr.status < 200 || xhr.status >= 300)\r\n          throw new Error(\"Twilio list failed: \" + xhr.status + \" - \" + xhr.responseText);\r\n\r\n        const obj = JSON.parse(xhr.responseText);\r\n        if (!obj.messages || !Array.isArray(obj.messages)) {\r\n          throw new Error(\"Unexpected Twilio response: \" + xhr.responseText);\r\n        }\r\n        for (const msg of obj.messages) {\r\n          postResult({\r\n            sid: msg.sid,\r\n            to: msg.to,\r\n            from: msg.from,\r\n            body: msg.body,\r\n            status: msg.status,\r\n            dateSent: msg.date_sent || \"\",\r\n            errorCode: msg.error_code ? String(msg.error_code) : \"\"\r\n          });\r\n        }\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    xhr.send();\r\n  });\r\n}\r\n\r\n// --- DELETE MESSAGE ---\r\nasync function onexecuteMessageDelete(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    if (!properties[\"sid\"]) throw new Error(\"sid is required.\");\r\n    const url = getTwilioApiBaseUrl(configuration[\"accountSid\"].toString()) + \"/Messages/\" + encodeURIComponent(properties[\"sid\"].toString()) + \".json\";\r\n    const xhr = createTwilioXHR(\"DELETE\", url, configuration);\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState !== 4) return;\r\n      try {\r\n        // Twilio returns 204 No Content for success\r\n        if (xhr.status === 204) {\r\n          resolve();\r\n        } else if (xhr.status < 200 || xhr.status >= 300) {\r\n          throw new Error(\"Twilio delete failed: \" + xhr.status + \" - \" + xhr.responseText);\r\n        } else {\r\n          // If Twilio ever returns a body, can parse here.\r\n          resolve();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    xhr.send();\r\n  });\r\n}\r\n\r\n  function base64Encode(str) {\r\n  if (typeof Buffer !== \"undefined\") return Buffer.from(str, \"utf-8\").toString(\"base64\");\r\n  if (typeof btoa !== \"undefined\") return btoa(str);\r\n  // Fallback: Pure JS (covers almost any JS runtime)\r\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n  let encoded = '', c1, c2, c3, e1, e2, e3, e4, i = 0;\r\n  while (i < str.length) {\r\n    c1 = str.charCodeAt(i++);\r\n    c2 = str.charCodeAt(i++);\r\n    c3 = str.charCodeAt(i++);\r\n    e1 = c1 >> 2;\r\n    e2 = ((c1 & 3) << 4) | (c2 >> 4);\r\n    e3 = ((c2 & 15) << 2) | (c3 >> 6);\r\n    e4 = c3 & 63;\r\n    if (isNaN(c2)) e3 = e4 = 64;\r\n    else if (isNaN(c3)) e4 = 64;\r\n    encoded += chars.charAt(e1) + chars.charAt(e2) + chars.charAt(e3) + chars.charAt(e4);\r\n  }\r\n  return encoded;\r\n}"],"names":["configuration","objectName","methodName","parameters","properties","schema","onexecuteMessage","onexecuteMessageSend","onexecuteMessageGet","onexecuteMessageList","onexecuteMessageDelete","getTwilioApiBaseUrl","accountSid","createTwilioXHR","method","url","xhr","username","password","credentials","base64Encode","resolve","reject","params","obj","e","msg","str","chars","encoded","c1","c2","c3","e1","e2","e3","e4","i"],"mappings":"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"}